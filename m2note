#!/bin/bash

# Extension for easy note finding
M2NOTE_EXT='.m2'
PROGRAM_NAME=$0

usage() {
  pp "Usage: ${PROGRAM_NAME} [-dhlqsv] [--getlist] [<note name>] [<note text>]"
  echo "OPTIONS: "
  echo "  -d:         Deletes <note name>"
  echo "  -e:         Opens note in the defined by the \$EDITOR env variable"
  echo "  -h:         Displays this message"
  echo "  -l:         Lists saved notes. Default command"
  echo "  -s:         Shows contents of <note name>. For example: "
  echo "                 ${PROGRAM_NAME} -s my_note my_other_note"
  echo "  -v:         Displays version info"
  echo "  --getlist   Non-pretty list of notes"
}

version() {
  echo "AUTHOR:   Grant Miiller, grant@m2iller.com"
  echo "VERSION:  2.0.0"
  echo "CREATED:  July 12, 2016"
}

# Just prints text with a new line before
# pp stands for padded print
pp() {
  echo ''
  echo $1
}

# check if the notes path exists
check_path() {
  # If M2NOTE_PATH variable is NOT set
  if [ -z $M2NOTE_PATH ]; then
    pp 'Please set M2NOTE_PATH, such as: '
    pp "    export M2NOTE_PATH=${HOME}/.m2notes"
    exit 1
  fi
}

# Create the notes directory
create_notes_dir() {
  pp 'Creating notes directory'
  mkdir $M2NOTE_PATH
  # if the last command was NOT successful
  if [ $? -ne 0 ]; then
    pp 'Could note create notes directory'
    exit 1
  fi
}

# Check if the note directory exists, and call create_notes_dir if not
check_dir() {
  # If the directory of $M2NOTE_PATH does NOT exist (remove ! to return true if set)
  if [ ! -d "${M2NOTE_PATH}" ]; then
    create_notes_dir
  fi
}

# Deletes notes from passed parameters
delete_notes() {
  local file
  local ERROR
  for file in "$@"; do
    echo "Deleting ${file}"
    ERROR=$(rm $M2NOTE_PATH/$file$M2NOTE_EXT 2>&1 >/dev/null)

    if [ $? -ne 0 ]; then
      pp 'Could not delete note due to:'
      echo $ERROR
    else
      pp "Successfully deleted: ${file}"
    fi
  done
}

# Creates a new from passed params
quick_note() {
  # Check if we have more than 0 arguments passed
  if [ "$#" -gt 0 ]; then
    local file=$1
    shift

    if [ "$#" -gt 0 ]; then
      echo $@ >> $M2NOTE_PATH/$file$M2NOTE_EXT
      echo "Updated note: ${file}"
    else
      touch $M2NOTE_PATH/$file$M2NOTE_EXT
      echo "Touched note: ${file}"
    fi

  else
    pp 'You must provide a note name'
    exit 1
  fi
}

# Prints out note/notes. Expects params
show_notes() {
  if [ "$#" -gt 0 ]; then
    local file
    local complete_file
    for file in "$@"; do
      complete_file=$M2NOTE_PATH/$file$M2NOTE_EXT

      if [ -f $complete_file ]; then
        pp "DISPLAY NOTE: ${file}"
        echo '================================='
        # Less file if huge, else make it behave like cat
        less -FX $complete_file
        echo '================================='
        echo ''
      else
         echo "Note ${file} does not exist"
      fi

    done
  else
    pp 'Please provide notes to print'
  fi
}

print_list() {
  # Get the list from get_list and pretty print it
  local the_list=$(get_list)
  pp 'Current notes are:'
  echo '===================='

  for entry in $the_list
  do
    echo $entry
  done
}

get_list() {
  # Find all entries in M2NOTE_PATH that are a file type and have the M2NOTE_EXT extension
  local entries=$(find $M2NOTE_PATH -type f -name "*$M2NOTE_EXT")
  local the_list
  for entry in $entries
  do
    # Returns the filename of $entry and stripping off $M2NOTE_EXT
    the_list="${the_list} $(basename $entry $M2NOTE_EXT)"
  done
  echo -e "${the_list}" | sed -e 's/^[[:space:]]*//'
}

open_in_editor() {
  if [ "$#" -gt 0 ]; then
    # Only open the first thing because damnit one note at a time
    "${EDITOR:-vi}" $M2NOTE_PATH/$1$M2NOTE_EXT
    exit 0
  fi
}

main() {
  check_path
  check_dir
  # Keep opt local
  local opt
  # syntax is getopts [arguments] [variable to check]
  # the -: at the end of the getopts string allows long actions (A HACK)
  while getopts ":dehlqsv-:" opt
  do
    case "$opt" in
      # this case path is a hack to allow long options with getopts
      -)
        case "${OPTARG}" in
          getlist)
            get_list
            exit 0
            ;;
          *)
            if [ "$OPTERR" = 1 ] && [ "${optspec:0:1}" != ":" ]; then
                echo "Unknown option --${OPTARG}" >&2
            fi
            exit 1
            ;;
        esac;;
      d)
        shift
        delete_notes $@
        exit 0
        ;;
      e)
        shift
        open_in_editor $@
        exit 0
        ;;
      h)
        usage
        exit 0
        ;;
      l)
        print_list
        exit 0
        ;;
      s)
        shift
        show_notes $@
        exit 0
        ;;
      v)
        version
        exit 0
        ;;
      \?)
        usage
        exit 1
        ;;
    esac
  done

  if [ "$#" -eq 0 ]; then
    print_list
    exit 0
  fi

  if [ "$#" -gt 0 ]; then
    quick_note $@
    exit 0
  fi
}

# Pass all arguments to main
main "$@"
